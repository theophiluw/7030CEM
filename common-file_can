/*@!Encoding:1252*/
includes
{
  
}

variables
{
    char s[256]=
      { 
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
      }; 
    char inv_s[256] = {
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
     };
    char mul2[256] =
    {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
    };
    char mul_3[256] = 
    { 
        0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
        0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
        0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
        0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a,
        0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
        0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
        0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
        0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
    };
    char mul_9[256] = 
    {
        0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
        0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x1a,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17
    };
    char mul_11[256] = 
    {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
    };
    char mul_13[256] = 
    {
        0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
        0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x1a,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17,
        0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
        0x1c,0x1d,0x26,0x1b,0x1e,0x15,0x2f,0x2f,0x14,0x1b,0x1a,0x3a,0x40,0x3d,0x2a,0x17
    };
    char mul_14[256] = 
    {
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
        0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
        0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
        0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
        0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
        0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e
    };
    char rcon[11] = 
    {
        0x1d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x08, 0x1b, 0x36 
    };
     int i,j,k,l,m,n,rounds;
     char wready[4];
     //message Message_1 ecu_msg1;
    //testable parameters
     //char plainText[16] = "This is";
     //char key1[16] = "This is";
    char expandedKey[128];  
    char cipher[16];
    char outPut[6];
}

void g (char wInput[], int counter,char wReady[] )
{
    char temp[4] = "";
    char array2[4] = "";
    char a;
    a= wInput[0];
    for(i =0;i<3; i++)
    {
        temp[i] = wInput[(i+1)];
    }
    temp[3] = a;
    for (i =0; i<4;i++)
    {
      temp[i] = s[temp[i]];
    }
        
    //unsigned char array formed for xoring with rcon
    
    array2[0] = rcon[counter];
    array2[1] = array2[2] = array2[3] = 0x00;
    for (i=0;i<4;i++)
    {
      wReady[i] = temp[i] ^ array2[i];
    }
}
void keyExpansion(char key1[], char expandedKey[])
{
    char words[44][4];
    int byteCount;
    int loc=0;
  //initialize words to all zeros
    for ( i = 0; i < 44; ++i)
    {
        for (j = 0; j <4; ++j)
        {
            words[i][j]=0x00;
        }
    }
    byteCount = 0; //this is to keep a count on the bytes of the expandedKey array
    
    for (i=0;i<16;i++)
    {
      expandedKey[i] = key1[i];
    }
    for(j=0;j<4;j++)
    {
         for(k=0;k<4;k++)
         {
            words[j][k] = expandedKey[byteCount];
            byteCount++;
         }
    }
    for(l=4;l<44;l++)
    {
        if((l%4)==0)
        {
            for(m=0;m<4;m++)
            {
                g(words[l-1], (l/4),wready);
                words[l][m] = words[(l-4)][m] ^ wready[m];
            }
        }
        else
        {
            for(n=0;n<4;n++)
            {
                words[l][n] = words[l-1][n] ^ words[l-4][n];
            }
        }
    }
    for(i=0;i<44;i++ )
    {
        for(j=0;j<4;j++)
        {
            expandedKey[loc] = words[i][j];
            loc++;
        }
    }
    
}
void mixColumns(char  plainText[])
{
    char tempC[4];
    for (i = 0; i < 4; ++i)
    {
        tempC[(4*i)+0] = (char) (mul2[plainText[(4*i)+0]] ^ mul_3[plainText[(4*i)+1]] ^ plainText[(4*i)+2] ^ plainText[(4*i)+3]);
        tempC[(4*i)+1] = (char) (plainText[(4*i)+0] ^ mul2[plainText[(4*i)+1]] ^ mul_3[plainText[(4*i)+2]] ^ plainText[(4*i)+3]);
        tempC[(4*i)+2] = (char) (plainText[(4*i)+0] ^ plainText[(4*i)+1] ^ mul2[plainText[(4*i)+2]] ^ mul_3[plainText[(4*i)+3]]);
        tempC[(4*i)+3] = (char) (mul_3[plainText[(4*i)+0]] ^ plainText[(4*i)+1] ^ plainText[(4*i)+2] ^ mul2[plainText[(4*i)+3]]);
    }
    for (i = 0; i < 16; ++i)
    {
        plainText[i] = tempC[i];
    }
}
void inverseMixedColumn (char plainText[])
{
    char tempC[18];
    for (i = 0; i < 4; ++i)
    {
        tempC[(4*i)+0] = (char) (mul_14[plainText[(4*i)+0]] ^ mul_11[plainText[(4*i)+1]] ^ mul_13[plainText[(4*i)+2]] ^ mul_9[plainText[(4*i)+3]]);
        tempC[(4*i)+1] = (char) (mul_9[plainText[(4*i)+0]] ^ mul_14[plainText[(4*i)+1]] ^ mul_11[plainText[(4*i)+2]] ^ mul_13[plainText[(4*i)+3]]);
        tempC[(4*i)+2] = (char) (mul_13[plainText[(4*i)+0]] ^ mul_9[plainText[(4*i)+1]] ^ mul_14[plainText[(4*i)+2]] ^ mul_11[plainText[(4*i)+3]]);
        tempC[(4*i)+3] = (char) (mul_11[plainText[(4*i)+0]] ^ mul_13[plainText[(4*i)+1]] ^ mul_9[plainText[(4*i)+2]] ^ mul_14[plainText[(4*i)+3]]);
    }
    for (i = 0; i < 16; ++i)
    {
        plainText[i] = tempC[i];
    }
}
void byteSubShiftRow(char state[])
{
    char tmp[16];
    tmp[0] = s[state[0]];
    tmp[1] = s[state[5]];
    tmp[2] = s[state[10]];
    tmp[3] = s[state[15]];
    tmp[4] = s[state[4]];
    tmp[5] = s[state[9]];
    tmp[6] = s[state[14]];
    tmp[7] = s[state[3]];
    tmp[8] = s[state[8]];
    tmp[9] = s[state[13]];
    tmp[10] = s[state[2]];
    tmp[11] = s[state[7]];
    tmp[12] = s[state[12]];
    tmp[13] = s[state[1]];
    tmp[14] = s[state[6]];
    tmp[15] = s[state[11]];
    for(i=0;i<16;i++)
    {
        state[i] = tmp[i];
    }
}
void inverseByteSubShiftRow(char plainText[])
{
    char temp[16];
    temp[0] = inv_s[plainText[0]];
    temp[1] = inv_s[plainText[13]];
    temp[2] = inv_s[plainText[10]];
    temp[3] = inv_s[plainText[7]];
    temp[4] = inv_s[plainText[4]];
    temp[5] = inv_s[plainText[1]];
    temp[6] = inv_s[plainText[14]];
    temp[7] = inv_s[plainText[11]];
    temp[8] = inv_s[plainText[8]];
    temp[9] = inv_s[plainText[5]];
    temp[10] = inv_s[plainText[2]];
    temp[11] = inv_s[plainText[15]];
    temp[12] = inv_s[plainText[12]];
    temp[13] = inv_s[plainText[9]];
    temp[14] = inv_s[plainText[6]];
    temp[15] = inv_s[plainText[3]];
    for (i = 0; i < 16; ++i)
        plainText[i] = temp[i];
}
void AESEncryption(char plainText[], char expandedKey[], char cipher[])
{
    char state[16];
   int counter = 0, loc;
    //unsigned char * expandedKey = malloc(176);
    //expandedKey = keyExpansion(Key);
    //key addition for the first round
    for (i = 0; i < 16; ++i)
    {
     state[i] = plainText[i] ^ expandedKey[i];
    }
    //now the 9 rounds begin
    for(rounds = 1; rounds<10; rounds++)
    {
        byteSubShiftRow(state);
        mixColumns(state);
       
        loc = rounds*16;
        while(counter<16)
        {
            state[counter] ^= expandedKey[loc];
            loc++;
            counter++;
        }
    }
    //10th round
    byteSubShiftRow(state);
    for(i=0; i<16;i++)
    {
        cipher[i] = state[i] ^ expandedKey[i+160];
    }
}
void AESDecryption(char cipher[], char expandedKey[], char plainText[])
{
    int counter = 0, loc;
    char state[16];
    //key whitening
    for (i = 0; i < 16; ++i)
        state[i] = cipher[i] ^ expandedKey[160+i];
    // 9 rounds of decryption
    for (rounds = 9; rounds >0 ; rounds--)
    {
        inverseByteSubShiftRow(state);
        loc = 16*rounds;
        while(counter<16)
        {
            state[counter] ^= expandedKey[loc];
            loc++;
            counter++;
        }
        inverseMixedColumn(state);
    }
    //final 10th round of decryption
    inverseByteSubShiftRow(state);
    for(i =0; i<16; i++)
        plainText[i] = state[i] ^ expandedKey[i];
}
